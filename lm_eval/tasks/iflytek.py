"""

"""
import numpy as np
from lm_eval.base import rf, Task
from lm_eval.metrics import mean

label_map = {11: '薅羊毛', 95: '借贷', 74: '违章', 70: '工具', 58: '高等教育', 25: '约会社交', 54: '职考', 34: '新闻', 71: '亲子儿童', 12: '魔幻', 49: '直播', 24: '辅助工具', 19: '体育竞技', 18: '动作类', 17: '休闲益智', 53: '中小学', 4: '同城服务', 99: '银行', 20: '棋牌中心', 118: '其他', 108: '外卖', 113: '办公', 94: '股票', 28: '论坛圈子', 48: '音乐', 96: '理财', 116: '经营', 23: 'MOBA', 22: '策略', 21: '经营养成', 102: '摄影修图', 13: '仙侠', 97: '彩票', 56: '英语', 1: '地图导航', 46: '视频', 36: '小说', 83: '问诊挂号', 111: '购物咨询', 30: '情侣社交', 82: '电子产品', 42: '百科', 16: '射击游戏', 117: '收款', 0: '打车', 72: '母婴', 90: '体育咨讯', 47: '短视频', 35: '漫画', 98: '记账', 81: '装修家居', 9: '政务', 59: '成人教育', 92: '支付', 91: '运动健身', 100: '美颜', 79: '租房', 10: '社区服务', 29: '婚恋社交', 8: '公共交通', 110: '社区超市', 45: '兼职', 103: '相机', 5: '快递物流', 88: '菜谱', 66: '酒店', 101: '影像剪辑', 3: '租车', 43: '影视娱乐', 39: '问答交流', 60: '艺术', 14: '卡牌', 62: '旅游资讯', 89: '餐饮店', 106: '电商', 41: '杂志', 85: '医疗服务', 105: '二手', 38: '教辅', 31: '社交工具', 107: '团购', 78: '行车辅助', 76: '汽车交易', 104: '绘画', 26: '即时通讯', 73: '驾校', 84: '养生保健', 50: '电台', 44: '求职', 65: '铁路', 114: '日程管理', 40: '搞笑', 61: '语言(非英语)', 7: '家政', 112: '笔记', 2: '免费WIFI', 115: '女性', 75: '汽车咨询', 33: '微博博客', 37: '技术', 52: '成人', 93: '保险', 80: '买房', 87: '美妆美业', 51: 'K歌', 77: '日常养车', 27: '工作社交', 15: '飞行空战', 109: '电影票务', 64: '民航', 63: '综合预定', 55: '公务员', 32: '生活社交', 86: '减肥瘦身', 67: '行程管理', 57: '视频教育', 6: '婚庆', 69: '出国', 68: '民宿短租'}

class Iflytek(Task):
    VERSION = 0
    DATASET_PATH = "clue"
    DATASET_NAME = "iflytek"

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        if self.has_training_docs():
            if self._training_docs is None:
                self._training_docs = list(
                    self.dataset["train"]
                )
            return self._training_docs

    def validation_docs(self):
        if self.has_validation_docs():
            return self.dataset["validation"]

    def test_docs(self):
        if self.has_test_docs():
            returnself.dataset["test"]

    def doc_to_text(self, doc):
        return (
            doc["sentence"]
            + "\n这段文本相关的主题是："
        )

    def doc_to_target(self, doc):
        return " " + label_map[int(doc["label"])]

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        # ll_true, _ = rf.loglikelihood(ctx, " True")
        # ll_neither, _ = rf.loglikelihood(ctx, " Neither")
        # ll_false, _ = rf.loglikelihood(ctx, " False")
        ret = []
        for i in range(119):
            ll_true, _ = rf.loglikelihood(ctx, " " + label_map[i])
            ret.append(ll_true)
        return ret

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        gold = int(doc["label"])
        pred = np.argmax(results)
        return {"acc": pred == gold}

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {"acc": mean}

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {"acc": True}
