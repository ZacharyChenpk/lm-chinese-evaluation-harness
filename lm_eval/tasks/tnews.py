"""

"""
import numpy as np
from lm_eval.base import rf, Task
from lm_eval.metrics import mean

labels = [100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116]
label_map = {108: '教育', 104: '财经', 106: '房产', 112: '旅游', 109: '科技', 103: '运动', 116: '游戏', 101: '文化', 107: '汽车', 100: '故事', 102: '娱乐', 110: '军事', 115: '农业', 113: '国际', 114: '股市'}

class Tnews(Task):
    VERSION = 0
    DATASET_PATH = "clue"
    DATASET_NAME = "tnews"

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        if self.has_training_docs():
            if self._training_docs is None:
                self._training_docs = list(
                    self.dataset["train"]
                )
            return self._training_docs

    def validation_docs(self):
        if self.has_validation_docs():
            return self.dataset["validation"]

    def test_docs(self):
        if self.has_test_docs():
            returnself.dataset["test"]

    def doc_to_text(self, doc):
        return (
            doc["sentence"]
            + "\n这条新闻相关的主题是："
        )

    def doc_to_target(self, doc):
        return " " + label_map[labels[doc["label"]]]

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        # ll_true, _ = rf.loglikelihood(ctx, " True")
        # ll_neither, _ = rf.loglikelihood(ctx, " Neither")
        # ll_false, _ = rf.loglikelihood(ctx, " False")
        ret = []
        for i in labels:
            ll_true, _ = rf.loglikelihood(ctx, " " + label_map[i])
            ret.append(ll_true)
        return ret

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        gold = doc["label"]
        pred = np.argmax(results)
        return {"acc": pred == gold}

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {"acc": mean}

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {"acc": True}
